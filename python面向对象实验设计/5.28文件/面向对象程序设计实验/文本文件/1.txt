import tkinter as tk
from tkinter import colorchooser, simpledialog

class DrawingApp:
    def __init__(self, root):
        self.root = root
        self.root.title("简单画图板")

        # 创建画布
        self.canvas = tk.Canvas(self.root, bg='white')
        self.canvas.pack(fill=tk.BOTH, expand=True)

        # 初始化绘图属性
        self.current_tool = '直线'
        self.current_color = 'black'
        self.line_width = 1
        self.start_coords = None

        # 用于存储绘制的图形
        self.drawings = []

        # 创建工具栏
        self.create_toolbar()

        # 绑定事件
        self.canvas.bind('<ButtonPress-1>', self.on_button_press)
        self.canvas.bind('<B1-Motion>', self.on_motion)
        self.canvas.bind('<ButtonRelease-1>', self.on_button_release)

    def create_toolbar(self):
        toolbar = tk.Frame(self.root)
        toolbar.pack(side=tk.TOP, fill=tk.X)

        # 绘图工具按钮
        tools = ['直线', '矩形', '圆']
        for tool in tools:
            button = tk.Button(toolbar, text=tool.capitalize(), command=lambda t=tool: self.set_tool(t))
            button.pack(side=tk.LEFT, padx=2, pady=2)

        # 颜色选择按钮
        color_button = tk.Button(toolbar, text="颜色", command=self.choose_color)
        color_button.pack(side=tk.LEFT, padx=2, pady=2)

        # 线宽调整按钮
        width_scale = tk.Scale(toolbar, from_=1, to=20, orient=tk.HORIZONTAL, label="线宽", command=self.change_line_width)
        width_scale.set(self.line_width)
        width_scale.pack(side=tk.LEFT, padx=2, pady=2)

        # 清除按钮
        clear_button = tk.Button(toolbar, text="清除", command=self.clear_canvas)
        clear_button.pack(side=tk.LEFT, padx=2, pady=2)

        # 撤销按钮
        undo_button = tk.Button(toolbar, text="撤销", command=self.undo_drawing)
        undo_button.pack(side=tk.LEFT, padx=2, pady=2)

    def set_tool(self, tool):                   #类的实例，定义一个名为set_tool的方法
        self.current_tool = tool                #用于更新类的实例所使用的工具，将参数tool赋值给self.current_tool

    def choose_color(self):                                 #类的实例，定义一个名为choose_color的方法
        self.current_color = colorchooser.askcolor()[1]     #调用colorchooser模块的askcolor函数，将选择的颜色的十六进制颜色码赋值给实例的属性 current_color。

    def change_line_width(self, value):                     #类的实例，定义一个名为change_line_width的方法。这个方法接受一个参数 value，并将这个值转换为整数类型后，赋值给实例的一个属性 line_width。
        self.line_width = int(value)                        #int(value)：将参数 value 转换为整数类型。self.line_width = ...：将转换后的整数值赋值给实例的属性 line_width。类的其他方法可以通过访问 self.line_width 来获取或使用新的线条宽度值。
                       

    def on_button_press(self, event):                       #类的实例，定义一个名为on_button_press的方法.第二个参数 event 是一个事件对象，包含了触发该方法的具体事件信息，比如鼠标点击事件的位置
        self.start_coords = (event.x, event.y)              #从事件对象 event 中提取鼠标的当前位置，x 和 y 分别代表鼠标在窗口中的水平和垂直坐标。将这两个坐标值打包成一个元组。将这个元组赋值给实例的属性 start_coords。这样，start_coords 属性就保存了鼠标按钮按下时的起始坐标。

    def on_motion(self, event):
        if self.start_coords:
            self.canvas.delete('preview')
            if self.current_tool == '直线':
                self.canvas.create_line(self.start_coords[0], self.start_coords[1], event.x, event.y, tags='preview', width=self.line_width, fill=self.current_color)
            elif self.current_tool == '矩形':
                self.canvas.create_rectangle(self.start_coords[0], self.start_coords[1], event.x, event.y, tags='preview', width=self.line_width, outline=self.current_color)
            elif self.current_tool == '圆':
                self.canvas.create_oval(self.start_coords[0], self.start_coords[1], event.x, event.y, tags='preview', width=self.line_width, outline=self.current_color)

    def on_button_release(self, event):
        if self.start_coords:
            if self.current_tool == '直线':
                line = self.canvas.create_line(self.start_coords[0], self.start_coords[1], event.x, event.y, width=self.line_width, fill=self.current_color)
            elif self.current_tool == '矩形':
                line = self.canvas.create_rectangle(self.start_coords[0], self.start_coords[1], event.x, event.y, width=self.line_width, outline=self.current_color)
            elif self.current_tool == '圆':
                line = self.canvas.create_oval(self.start_coords[0], self.start_coords[1], event.x, event.y, width=self.line_width, outline=self.current_color)
            self.drawings.append(line)
            self.start_coords = None

    def clear_canvas(self):
        self.drawings = []
        self.canvas.delete('all')

    def undo_drawing(self):
        if self.drawings:
            last_drawing = self.drawings.pop()
            self.canvas.delete(last_drawing)

if __name__ == "__main__":
    root = tk.Tk()
    app = DrawingApp(root)
    root.mainloop()
